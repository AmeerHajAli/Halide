#!/bin/bash

app="$1"
idx="$2"
block="$3"

if [ $# -lt 2 ]; then
    echo not enough args
    exit 1
fi

if [ "$app" == "camera_pipe" ] || [ "$app" == "harris" ] || [ "$app" == "bgu" ]; then
    ./build_filter "$app" "$idx"
    exit $?
fi

bin="${app}/bin/host"
if [ "$app" == "resnet_50_blockwise" ]; then
    bin="${app}/bin"
fi

HALIDE_DISTRIB_PATH="$PWD/../distrib"
D="$bin"

WEIGHTS="$PWD/autoscheduler/baseline.weights"
GENERATOR="$bin/${app}.generator"
HL_TARGET="host"
FNAME="${app}_auto_schedule"
RUNTIME="${D}/halide_runtime.o"

if [ "$app" == "resnet_50_blockwise" ]; then
    GENERATOR="$bin/bin/resnet50block.generator"
    FNAME="resnet50block_auto_schedule${block}"
    RUNTIME=""
fi

REGCPP="${FNAME}.registration.cpp"
BENCH="bench${block}_${idx}"

TIMEOUT_CMD="timeout"
if [ $(uname -s) = "Darwin" ] && ! which $TIMEOUT_CMD 2>&1 >/dev/null; then
    # OSX doesn't have timeout; gtimeout is equivalent and available via Homebrew
    TIMEOUT_CMD="gtimeout"
    if ! which $TIMEOUT_CMD 2>&1 >/dev/null; then
        echo "Can't find the command 'gtimeout'. Run 'brew install coreutils' to install it."
        exit 1
    fi
fi

COMPILATION_TIMEOUT=600s
BENCHMARKING_TIMEOUT=60s

if [ "$RUNTIME" != "" ] && [ ! -f ${D}/halide_runtime.o ]; then
    HL_SEED=${SEED} \
        HL_WEIGHTS_DIR=${WEIGHTS} \
        HL_MACHINE_PARAMS=32,24000000,40 \
        ${TIMEOUT_CMD} -k ${COMPILATION_TIMEOUT} ${COMPILATION_TIMEOUT} \
        ${GENERATOR} \
        -r halide_runtime \
        -o ${D} \
        -e o \
        target=${HL_TARGET} \
          &> ${D}/runtime_compile_log.txt || echo "Runtime compilation failed or timed out for ${D}"
fi

c++ \
    -std=c++11 \
    -I ${HALIDE_DISTRIB_PATH}/include \
    ${HALIDE_DISTRIB_PATH}/tools/RunGenMain.cpp \
    ${D}/${REGCPP} \
    ${app}/mcts_libs/${FNAME}_${idx}.a $RUNTIME \
    -o ${app}/mcts_libs/$BENCH \
    -DHALIDE_NO_PNG -DHALIDE_NO_JPEG \
    -ldl -lpthread

