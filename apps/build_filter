#!/bin/bash

app="$1"
idx="$2"

HALIDE_HOME="$PWD/.."

if [ $# -ne 2 ]; then
    echo not enough args
    exit 1
fi

bin="${app}/bin/host"
if [ "$app" == "resnet_50_blockwise" ]; then
    bin="${app}/bin"
fi

HALIDE_DISTRIB_PATH="$PWD/../distrib"
D="$bin"

WEIGHTS="$PWD/autoscheduler/baseline.weights"
GENERATOR="$bin/${app}.generator"
PIPELINE=${app}
AUTOSCHED_BIN="$PWD/autoscheduler/bin"
HL_TARGET="host"
FNAME="${app}_auto_schedule"
REGCPP="${FNAME}.registration.cpp"

TIMEOUT_CMD="timeout"
if [ $(uname -s) = "Darwin" ] && ! which $TIMEOUT_CMD 2>&1 >/dev/null; then
    # OSX doesn't have timeout; gtimeout is equivalent and available via Homebrew
    TIMEOUT_CMD="gtimeout"
    if ! which $TIMEOUT_CMD 2>&1 >/dev/null; then
        echo "Can't find the command 'gtimeout'. Run 'brew install coreutils' to install it."
        exit 1
    fi
fi

COMPILATION_TIMEOUT=600s
BENCHMARKING_TIMEOUT=60s

cd $app

if [ "$app" == "camera_pipe" ]; then

    # Build manual schedule
    if [ ! -f bin/host/${app}.a ]; then
        bin/host/camera_pipe.generator -g camera_pipe -e static_library,h,registration,stmt,assembly -o bin/host -f camera_pipe target=host auto_schedule=false
    fi

    # Build autoscheduled schedule
    g++ -O3 -std=c++11 -I ${HALIDE_HOME}/distrib/include/ -I ${HALIDE_HOME}/distrib/tools/  -Wall -Werror -Wno-unused-function -Wcast-qual -Wignored-qualifiers -Wno-comment -Wsign-compare -Wno-unknown-warning-option -Wno-psabi -fopenmp -Wall -Ibin/host process.cpp bin/host/camera_pipe.a mcts_libs/camera_pipe_auto_schedule_${idx}.a -o mcts_libs/bench_${idx} $(libpng-config --ldflags) -ljpeg $(libpng-config --cflags) $(libpng-config --cflags)/..  -ldl -lpthread -lz

elif [ "$app" == "harris" ]; then

    # Build manual schedule
    if [ ! -f bin/host/${app}.a ]; then
        bin/host/harris.generator -g harris -f harris -o bin/host target=host-no_runtime auto_schedule=false
    fi

    # Build runtime
    if [ ! -f bin/host/runtime.a ]; then
        bin/host/harris.generator -r runtime -o bin/host target=host
    fi

    # Build autoscheduled schedule
    g++ -O3 -std=c++11 -I ${HALIDE_HOME}/distrib/include/ -I ${HALIDE_HOME}/distrib/tools/  -Wall -Werror -Wno-unused-function -Wcast-qual -Wignored-qualifiers -Wno-comment -Wsign-compare -Wno-unknown-warning-option -Wno-psabi -fopenmp -Ibin/host -Wall -O3 filter.cpp bin/host/harris.a mcts_libs/harris_auto_schedule_${idx}.a bin/host/runtime.a -o mcts_libs/bench_${idx}  -ldl -lpthread -lz $(libpng-config --ldflags) -ljpeg $(libpng-config --cflags) $(libpng-config --cflags)/..

elif [ "$app" == "bgu" ]; then

    # Build manual schedule
    if [ ! -f bin/host/${app}.a ]; then
        bin/host/bgu.generator -g bgu -f bgu -o bin/host target=host-no_runtime auto_schedule=false
    fi

    # Build runtime
    if [ ! -f bin/host/runtime.a ]; then
        bin/host/bgu.generator -r runtime -o bin/host target=host
    fi

    g++ -O3 -std=c++11 -I ${HALIDE_HOME}/distrib/include/ -I ${HALIDE_HOME}/distrib/tools/  -Wall -Werror -Wno-unused-function -Wcast-qual -Wignored-qualifiers -Wno-comment -Wsign-compare -Wno-unknown-warning-option -Wno-psabi -fopenmp -Ibin/host -Wall -O3 filter.cpp bin/host/bgu.a mcts_libs/bgu_auto_schedule_${idx}.a bin/host/runtime.a -o mcts_libs/bench_${idx} -ldl -lpthread -lz $(libpng-config --ldflags) -ljpeg $(libpng-config --cflags) $(libpng-config --cflags)/..

else
    echo unknown app, can\'t build
    exit 1
fi

