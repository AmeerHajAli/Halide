#!/bin/bash

app="$1"
idx="$2"

if [ $# -ne 2 ]; then
    echo not enough args
    exit 1
fi

if [ "$app" == "camera_pipe" ] || [ "$app" == "harris" ] || [ "$app" == "bgu" ]; then
    ./run_filter "$app" "$idx"
    exit $?
fi

bin="${app}/bin/host"
if [ "$app" == "resnet_50_blockwise" ]; then
    bin="${app}/bin"
fi

HALIDE_DISTRIB_PATH="$PWD/../distrib"
D="$bin"

WEIGHTS="$PWD/autoscheduler/baseline.weights"
GENERATOR="$bin/${app}.generator"
PIPELINE=${app}
AUTOSCHED_BIN="$PWD/autoscheduler/bin"
HL_TARGET="host"
FNAME="${app}_auto_schedule"
REGCPP="${FNAME}.registration.cpp"

TIMEOUT_CMD="timeout"
if [ $(uname -s) = "Darwin" ] && ! which $TIMEOUT_CMD 2>&1 >/dev/null; then
    # OSX doesn't have timeout; gtimeout is equivalent and available via Homebrew
    TIMEOUT_CMD="gtimeout"
    if ! which $TIMEOUT_CMD 2>&1 >/dev/null; then
        echo "Can't find the command 'gtimeout'. Run 'brew install coreutils' to install it."
        exit 1
    fi
fi

COMPILATION_TIMEOUT=600s
BENCHMARKING_TIMEOUT=300s

HL_NUM_THREADS=32 \
    ${TIMEOUT_CMD} -k ${BENCHMARKING_TIMEOUT} ${BENCHMARKING_TIMEOUT} \
    ${app}/mcts_libs/bench_$idx \
    --estimate_all \
    --benchmarks=all \
    $output_extents \
        | grep "^Benchmark for " \
        | sed 's/^Benchmark for '${FNAME}' produces best case of \(\S*\).*/\1/' \
        > ${app}/mcts_libs/bench_${idx}.txt || echo "Benchmarking failed or timed out for ${D}"

